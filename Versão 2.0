import sqlite3
import tkinter as tk
from tkinter import messagebox

# Função para conectar ao banco de dados
def connect_db():
    conn = sqlite3.connect('biblioteca.db')
    cursor = conn.cursor()
    return conn, cursor

# Função para adicionar autor
def add_autor():
    nome = entry_nome_autor.get()
    nacionalidade = entry_nacionalidade_autor.get()
    conn, cursor = connect_db()
    cursor.execute('INSERT INTO Autores (Nome, Nacionalidade) VALUES (?, ?)', (nome, nacionalidade))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Autor adicionado com sucesso!')
    entry_nome_autor.delete(0, tk.END)
    entry_nacionalidade_autor.delete(0, tk.END)
    view_autores()

# Função para adicionar livro
def add_livro():
    titulo = entry_titulo_livro.get()
    autor_id = entry_autor_id.get()
    ano = entry_ano_livro.get()
    genero = entry_genero_livro.get()
    conn, cursor = connect_db()
    cursor.execute('INSERT INTO Livros (Titulo, AutorID, AnoPublicacao, Genero) VALUES (?, ?, ?, ?)',
                   (titulo, autor_id, ano, genero))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Livro adicionado com sucesso!')
    entry_titulo_livro.delete(0, tk.END)
    entry_autor_id.delete(0, tk.END)
    entry_ano_livro.delete(0, tk.END)
    entry_genero_livro.delete(0, tk.END)
    view_livros()

# Função para excluir autor
def delete_autor():
    selected_item = autores_list.curselection()
    if not selected_item:
        messagebox.showwarning('Seleção Inválida', 'Selecione um autor para excluir.')
        return
    autor_id = autores_list.get(selected_item)[0]  # Obtém o ID do autor selecionado
    conn, cursor = connect_db()
    cursor.execute('DELETE FROM Autores WHERE AutorID = ?', (autor_id,))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Autor excluído com sucesso!')
    view_autores()

# Função para excluir livro
def delete_livro():
    selected_item = livros_list.curselection()
    if not selected_item:
        messagebox.showwarning('Seleção Inválida', 'Selecione um livro para excluir.')
        return
    livro_id = livros_list.get(selected_item)[0]  # Obtém o ID do livro selecionado
    conn, cursor = connect_db()
    cursor.execute('DELETE FROM Livros WHERE LivroID = ?', (livro_id,))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Livro excluído com sucesso!')
    view_livros()

# Função para visualizar todos os livros
def view_livros():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Livros')
    livros = cursor.fetchall()
    conn.close()
    livros_list.delete(0, tk.END)
    for livro in livros:
        livros_list.insert(tk.END, livro)

# Função para visualizar todos os autores
def view_autores():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Autores')
    autores = cursor.fetchall()
    conn.close()
    autores_list.delete(0, tk.END)
    for autor in autores:
        autores_list.insert(tk.END, autor)

# Função para visualizar todos os empréstimos
def view_emprestimos():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Emprestimos')
    emprestimos = cursor.fetchall()
    conn.close()
    emprestimos_list.delete(0, tk.END)
    for emp in emprestimos:
        emprestimos_list.insert(tk.END, emp)

# Função para visualizar atrasos nos empréstimos
def view_atrasos():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Emprestimos WHERE DataDevolucao < date("now")')
    atrasos = cursor.fetchall()
    conn.close()
    atrasos_list.delete(0, tk.END)
    for atraso in atrasos:
        atrasos_list.insert(tk.END, atraso)

# Interface gráfica com Tkinter
root = tk.Tk()
root.title('Sistema de Biblioteca')

# Definindo a cor de fundo para Thistle
bg_color = '#D8BFD8'  # Cor Thistle
root.configure(bg=bg_color)  # Cor de fundo da janela principal

# Frame para adicionar autores
frame_autor = tk.LabelFrame(root, text='Adicionar Autor', bg=bg_color)
frame_autor.grid(row=0, column=0, padx=10, pady=10)

tk.Label(frame_autor, text='Nome:', bg=bg_color).grid(row=0, column=0)
entry_nome_autor = tk.Entry(frame_autor)
entry_nome_autor.grid(row=0, column=1)

tk.Label(frame_autor, text='Nacionalidade:', bg=bg_color).grid(row=1, column=0)
entry_nacionalidade_autor = tk.Entry(frame_autor)
entry_nacionalidade_autor.grid(row=1, column=1)

tk.Button(frame_autor, text='Adicionar Autor', command=add_autor).grid(row=2, columnspan=2, pady=5)
tk.Button(frame_autor, text='Excluir Autor', command=delete_autor).grid(row=3, columnspan=2, pady=5)

# Frame para adicionar livros
frame_livro = tk.LabelFrame(root, text='Adicionar Livro', bg=bg_color)
frame_livro.grid(row=1, column=0, padx=10, pady=10)

tk.Label(frame_livro, text='Título:', bg=bg_color).grid(row=0, column=0)
entry_titulo_livro = tk.Entry(frame_livro)
entry_titulo_livro.grid(row=0, column=1)

tk.Label(frame_livro, text='AutorID:', bg=bg_color).grid(row=1, column=0)
entry_autor_id = tk.Entry(frame_livro)
entry_autor_id.grid(row=1, column=1)

tk.Label(frame_livro, text='Ano Publicação:', bg=bg_color).grid(row=2, column=0)
entry_ano_livro = tk.Entry(frame_livro)
entry_ano_livro.grid(row=2, column=1)

tk.Label(frame_livro, text='Gênero:', bg=bg_color).grid(row=3, column=0)
entry_genero_livro = tk.Entry(frame_livro)
entry_genero_livro.grid(row=3, column=1)

tk.Button(frame_livro, text='Adicionar Livro', command=add_livro).grid(row=4, columnspan=2, pady=5)
tk.Button(frame_livro, text='Excluir Livro', command=delete_livro).grid(row=5, columnspan=2, pady=5)

# Frame para adicionar empréstimos
frame_emprestimo = tk.LabelFrame(root, text='Adicionar Empréstimo', bg=bg_color)
frame_emprestimo.grid(row=2, column=0, padx=10, pady=10)

tk.Label(frame_emprestimo, text='LivroID:', bg=bg_color).grid(row=0, column=0)
entry_livro_id = tk.Entry(frame_emprestimo)
entry_livro_id.grid(row=0, column=1)

tk.Label(frame_emprestimo, text='Data Empréstimo:', bg=bg_color).grid(row=1, column=0)
entry_data_emp = tk.Entry(frame_emprestimo)
entry_data_emp.grid(row=1, column=1)

tk.Label(frame_emprestimo, text='Data Devolução:', bg=bg_color).grid(row=2, column=0)
entry_data_dev = tk.Entry(frame_emprestimo)
entry_data_dev.grid(row=2, column=1)

tk.Label(frame_emprestimo, text='Nome Usuário:', bg=bg_color).grid(row=3, column=0)
entry_nome_usuario = tk.Entry(frame_emprestimo)
entry_nome_usuario.grid(row=3, column=1)

tk.Button(frame_emprestimo, text='Adicionar Empréstimo', command=add_emprestimo).grid(row=4, columnspan=2, pady=5)

# Frame para visualizar dados
frame_visualizar = tk.LabelFrame(root, text='Visualizar Dados', bg=bg_color)
frame_visualizar.grid(row=0, column=1, rowspan=3, padx=10, pady=10)

# Lista para mostrar os autores
autores_list = tk.Listbox(frame_visualizar, height=5, width=50)
autores_list.grid(row=0, column=0)
tk.Button(frame_visualizar, text='Visualizar Autores', command=view_autores).grid(row=1, column=0)

# Lista para mostrar os livros
livros_list = tk.Listbox(frame_visualizar, height=5, width=50)
livros_list.grid(row=2, column=0)
tk.Button(frame_visualizar, text='Visualizar Livros', command=view_livros).grid(row=3, column=0)

# Lista para mostrar os empréstimos
emprestimos_list = tk.Listbox(frame_visualizar, height=5, width=50)
emprestimos_list.grid(row=4, column=0)
tk.Button(frame_visualizar, text='Visualizar Empréstimos', command=view_emprestimos).grid(row=5, column=0)

# Lista para mostrar atrasos
atrasos_list = tk.Listbox(frame_visualizar, height=5, width=50)
atrasos_list.grid(row=6, column=0)
tk.Button(frame_visualizar, text='Visualizar Atrasos', command=view_atrasos).grid(row=7, column=0)

# Iniciar a interface
root.mainloop()
